[{"content":"# Selecting Elements By Role\n\nSelecting elements based upon their role is the preferred way of testing elements with React Testing Library.  We use role selectors instead of more classic ways of finding elements, like CSS selectors.\n\nARIA (Accessible Rich Internet Applications) is a set of attributes that can be added to HTML elements to help make web applications more accessible to users with disabilities. These attributes provide additional information about the purpose and behavior of an element, which can be used by assistive technologies such as screen readers to improve the user experience.\n\nEven though these ARIA roles are an additional topic to memorize, we engineers use them because they allow us to write more flexible tests.  In many cases it doesn't matter if an element is presenting text in an `h1` element or an `h3` element.  By finding elements based on their role, we can make small changes to a component and not break its respective test.  Some engineers do not care for this flexibility.  If you don't wish to use ARIA roles, you can always fall back to using standard CSS selectors.\n\nSome elements - not all - are 'implicitly' (or automatically) assigned a role.  Some of the more commonly-used roles can be found in the `RoleExample` component below.\n\n","type":"text","id":"ipckb"},{"content":"Many elements have roles that are easy to memorize.  Here are some of the easier ones to remember:\n\n| Element               | Role    |\n|-----------------------|---------|\n| `a` with `href`       | link    |\n| `h1`, `h2`, ..., `h6` | heading |\n| `button`              | button  |\n| `img` with `alt`      | img     |\n\nOther elements can be a little more challenging to remember.  For example:\n\n| Element                      | Role        |\n|------------------------------|-------------|\n| `input` with `type=\"number\"` | spinbutton  |\n| `header`                     | banner      |\n| `footer`                     | contentinfo |","type":"text","id":"9l09k"},{"content":"## Accessible Names\n\nSometimes multiple elements of the same type will be displayed by a component, and you will need to find a particular instance of that element.  You can be more specific by finding elements based upon their role *and* their accessible name.\n\nThe accessible name of most elements is the text placed between the JSX tags.  For example, the accessible name of `<a href=\"/\">Home</a>` is `Home`.\n\nIn the component below, two `button` elements are displayed.  The only difference between them is the text they contain.  Their accessible names are `Submit` and `Cancel`, respectively.","type":"text","id":"g8ff7"},{"content":"## Selecting By Accessible Name\n\nElements with a defined acessible name can be selected by passing a filtering object to the `getByRole` method.  Example below.","type":"text","id":"kppqk"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>Contentinfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" /> Img\n      <input type=\"checkbox\" /> Checkbox\n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> Textbox\n      <li>Listitem</li>\n      <ul>Listgroup</ul>\n    </div>\n  );\n}\n\nrender(<RoleExample />);\n","type":"code","id":"6gs6v"},{"content":"test('can find elements by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list'\n  ];\n\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n\n    expect(el).toBeInTheDocument();\n  }\n});","type":"code","id":"bttjn"},{"content":"function AccessibleName() {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  );\n}\nrender(<AccessibleName />);","type":"code","id":"cjrkl"},{"content":"import { screen, render } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <header>Banner</header>\n      <footer>ContentInfo</footer>\n      <h1>Heading</h1>\n      <img alt=\"description\" /> img\n      <input type=\"radio\" /> radio\n      <input type=\"checkbox\" /> checkbox\n      <input type=\"number\" /> number\n      <input type=\"text\" /> textBox\n      <li>List Item</li>\n      <ul>List</ul>\n    </div>\n  );\n}\n\nrender(<RoleExample />);","type":"code","id":"bq1su"},{"content":"test('', async () => {\n  render(<RoleExample />);\n\n  let roles = [\n    'link',\n    'button',\n    'banner',\n    'contentinfo',\n    'heading',\n    'img',\n    'radio',\n    'checkbox',\n    'spinbutton',\n    'textbox',\n    'listitem',\n    'list',\n  ];\n\n  for (let role of roles) {\n    expect(screen.getByRole(role)).toBeInTheDocument;\n  }\n});","type":"code","id":"t8mzd"},{"content":"import { screen, render } from '@testing-library/react';\n\nfunction Accessible() {\n  return (\n    <div\n      style={{\n        display: 'block',\n        padding: '5px',\n        display: 'flex',\n        gap: '5px',\n        flexDirection: 'column',\n        width: '100%',\n        height: '100vh',\n        alignItems: 'center',\n        justify: 'center',\n      }}\n    >\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" />\n      <button type=\"submit\">Submit</button>\n      <button type=\"submit\">Cancel</button>\n    </div>\n  );\n}\n\nrender(<Accessible />);","type":"code","id":"ccn1t"},{"content":"test('Can Select By Accessible Roles', async () => {\n  render(<Accessible />);\n  expect(screen.getByRole('textbox', { name: /email/i })).toBeInTheDocument;\n  expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument;\n  expect(screen.getByRole('button', { name: /cancel/i })).toBeInTheDocument;\n});","type":"code","id":"1bwws"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        gap: '15px',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          gap: '15px',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"text\" id=\"email\" />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          gap: '15px',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <label htmlFor=\"search\">Search</label>\n        <input type=\"text\" id=\"search\" />\n      </div>\n    </div>\n  );\n}\n\nrender(<App />);","type":"code","id":"xesyr"},{"content":"test('', async () => {\n  render(<App />);\n  expect(screen.getByRole('textbox', { name: /email/i })).toBeInTheDocument;\n  expect(screen.getByRole('textbox', { name: /search/i })).toBeInTheDocument;\n});","type":"code","id":"s7hhr"},{"content":"import { screen, render } from '@testing-library/react';\n\nfunction IconButton() {\n  return (\n    <>\n      <button aria-label='sign-in'>\n        <svg />\n      </button>\n      <button aria-label='sign-out'>\n        <svg />\n      </button>\n    </>\n  );\n}\n\nrender(<IconButton />);","type":"code","id":"4wwnl"},{"content":"test('', async () => {\n  render(<IconButton />);\n  expect(screen.getByRole('button', { name: /sign-in/i })).toBeInTheDocument;\n  expect(screen.getByRole('button', { name: /sign-out/i })).toBeInTheDocument;\n});","type":"code","id":"xay8d"}]