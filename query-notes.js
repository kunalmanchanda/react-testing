[{"content":"# Query  Functions\n\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             |\n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 |\n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |","type":"text","id":"aar6f"},{"content":"# Selecting Elements By Role\n\nSelecting elements based upon their role is the preferred way of testing elements with React Testing Library.  We use role selectors instead of more classic ways of finding elements, like CSS selectors.\n\nARIA (Accessible Rich Internet Applications) is a set of attributes that can be added to HTML elements to help make web applications more accessible to users with disabilities. These attributes provide additional information about the purpose and behavior of an element, which can be used by assistive technologies such as screen readers to improve the user experience.\n\nEven though these ARIA roles are an additional topic to memorize, we engineers use them because they allow us to write more flexible tests.  In many cases it doesn't matter if an element is presenting text in an `h1` element or an `h3` element.  By finding elements based on their role, we can make small changes to a component and not break its respective test.  Some engineers do not care for this flexibility.  If you don't wish to use ARIA roles, you can always fall back to using standard CSS selectors.\n\nSome elements - not all - are 'implicitly' (or automatically) assigned a role.  Some of the more commonly-used roles can be found in the `RoleExample` component below.\n\n","type":"text","id":"ipckb"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <>\n      <ul>\n        <li>Red</li>\n        <li>Blue</li>\n        <li>Green</li>\n      </ul>\n    </>\n  );\n}\n\nrender(<ColorList />);","type":"code","id":"21zgz"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('textbox')).toThrow();\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrown = false;\n\n  try {\n    await screen.findByRole('textbox');\n  } catch (err) {\n    errorThrown = true;\n  }\n\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"y17nr"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(screen.getByRole('list')).toBeInTheDocument;\n  expect(screen.queryByRole('list')).toBeInTheDocument;\n  expect(await screen.findByRole('list')).toBeInTheDocument;\n});","type":"code","id":"z0y9e"},{"content":"test('getBy, queryBy, findBy when they find >1 element', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('listitem')).toThrow();\n  expect(() => screen.queryByRole('listitem')).toThrow();\n\n  let errorThrown = false;\n\n  try {\n    await screen.findByRole('listitem');\n  } catch (err) {\n    errorThrown = true;\n  }\n\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"pjtmm"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\n  render(<ColorList />);\n\n  expect(screen.getAllByRole('listitem')).toBeInTheDocument;\n  expect(screen.queryAllByRole('listitem')).toBeInTheDocument;\n  expect(await screen.findAllByRole('listitem')).toBeInTheDocument;\n});","type":"code","id":"kvd4j"},{"content":"test('favour using getBy to prove the element exists', async () => {\n  render(<ColorList />);\n  \n  expect(screen.getByRole('list')).toBeInTheDocument;\n  expect(screen.getAllByRole('listitem')).toBeInTheDocument;\n});","type":"code","id":"2p67p"},{"content":"test(\"favour using queryBy when providing an element doesn't exists\", async () => {\n  render(<ColorList />);\n\n  expect(screen.queryByRole('textarea')).not.toBeInTheDocument;\n  expect(screen.queryAllByRole('textarea')).not.toBeInTheDocument;\n});","type":"code","id":"hrxqi"},{"content":"import { useEffect, useState } from 'react';\n\nfunction fetchColors() {\n  return Promise.resolve(['red', 'blue', 'green']);\n}\n\nfunction LodableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fetchColors().then((c) => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LodableColorList />);","type":"code","id":"5oh18"},{"content":"test('Favour findBy, findAllBy when data fetching', async () => {\n  render(<LodableColorList />);\n\n  expect(await screen.findAllByRole('listitem')).toBeInTheDocument;\n});","type":"code","id":"f9whz"}]